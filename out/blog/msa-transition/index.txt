3:I[4707,[],""]
5:I[6423,[],""]
6:I[2972,["972","static/chunks/972-b7810473e599220f.js","308","static/chunks/app/blog/%5Bslug%5D/page-9e983e0cf50bd495.js"],""]
4:["slug","msa-transition","d"]
0:["EPgTisOcJPgJP3Naet6e6",[[["",{"children":["blog",{"children":[["slug","msa-transition","d"],{"children":["__PAGE__?{\"slug\":\"msa-transition\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","msa-transition","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ab9c12d969275238.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":[["$","meta",null,{"httpEquiv":"Cache-Control","content":"no-cache, no-store, must-revalidate"}],["$","meta",null,{"httpEquiv":"Pragma","content":"no-cache"}],["$","meta",null,{"httpEquiv":"Expires","content":"0"}],["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]]}],["$","body",null,{"children":[["$","header",null,{"className":"bg-gray-800 text-white p-4","children":["$","div",null,{"className":"container mx-auto flex justify-between items-center","children":[["$","h1",null,{"className":"text-xl font-bold","children":["$","$L6",null,{"href":"/","children":"Mistersoh's blog"}]}],["$","nav",null,{"children":["$","ul",null,{"className":"flex space-x-4","children":[["$","li",null,{"children":["$","$L6",null,{"href":"/","className":"hover:text-gray-300","children":"홈"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/blog","className":"hover:text-gray-300","children":"블로그"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/resume","className":"hover:text-gray-300","children":"이력서"}]}]]}]}]]}]}],["$","main",null,{"className":"container mx-auto p-4","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","footer",null,{"className":"bg-gray-800 text-white p-4 mt-8","children":["$","div",null,{"className":"container mx-auto text-center","children":["$","p",null,{"children":["© ",2025," Mistersoh's Blog. All rights reserved."]}]}]}]]}]]}]],null],null],["$L7",null]]]]
8:T4d4d,<p>안녕하세요.</p>
<p>오늘은 모놀리식 서비스 레포를 MSA로 전환 및 구성하며 겪은 실수와 그에 대한 가이드라인에 대해 알아보겠습니다.</p>
<h2>목차</h2>
<ol>
<li><a href="#1-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%8F%85%EB%A6%BD%EC%84%B1-%EC%9C%A0%EC%A7%80">서비스 독립성 유지</a></li>
<li><a href="#2-%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EC%84%B1%EB%8A%A5-%EC%A0%80%ED%95%98">동기 호출로 인한 성능 저하</a></li>
<li><a href="#3-%EB%AA%A8%EB%93%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A4%91%EB%B3%B5-%EC%A0%80%EC%9E%A5%ED%95%98%EB%A0%A4%EB%8A%94-%EC%8B%9C%EB%8F%84">모든 데이터를 중복 저장하려는 시도</a></li>
<li><a href="#4-%EB%B6%88%EC%99%84%EC%A0%84%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%ED%9A%8C%EB%B3%B5-%EA%B3%84%ED%9A%8D">불완전한 에러 처리 및 회복 계획</a></li>
<li><a href="#5-%EB%B3%B4%EC%95%88-%EC%B7%A8%EC%95%BD%EC%A0%90">보안 취약점</a></li>
<li><a href="#6-%EB%B6%88%EC%99%84%EC%A0%84%ED%95%9C-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%B0%8F-%EB%A1%9C%EA%B9%85">불완전한 모니터링 및 로깅</a></li>
<li><a href="#7-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EB%B3%B5-%EA%B2%80%EC%A6%9D%EC%9D%84-%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C">서비스 간 데이터 중복 검증을 하지 않음</a></li>
<li><a href="#8-api-%EB%AC%B8%EC%84%9C%ED%99%94%EC%99%80-%EB%AA%85%EC%84%B8-%EB%B6%80%EC%A1%B1">API 문서화와 명세 부족</a></li>
<li><a href="#9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%84-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B3%BC%EB%8F%84%ED%95%98%EA%B2%8C-%EC%83%9D%EC%84%B1">서비스 간 의존성 과도하게 생성</a></li>
<li><a href="#10-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81%EC%9D%98-%EB%B3%B5%EC%9E%A1%EB%8F%84-%EC%A6%9D%EA%B0%80">비즈니스 로직의 복잡도 증가</a></li>
</ol>
<p></p>
<h2>1. 서비스 독립성 유지</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>각 서비스는 <strong>독립적인 DB</strong>와 <strong>자체 엔티티</strong>를 관리합니다.</li>
<li>서비스 간 데이터 참조는 <strong>API 호출</strong> 또는 <strong>이벤트 기반 동기화</strong>로 처리합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>서비스가 서로의 DB나 엔티티를 <strong>직접 참조</strong>하는 경우가 있습니다.</p>
<h3><strong>실제 사례</strong></h3>
<ul>
<li>기존 모놀리식(Spring JPA) 환경에서는 한 레포 내에서 여러 서비스, 엔티티들이 디렉토리별로 구성되어 있었습니다.</li>
<li>엔티티 간 <code>@OneToMany</code>, <code>@ManyToOne</code> 등을 통해 자유롭게 관계를 맺었습니다.</li>
<li>MSA 전환으로 각 서비스가 독립 레포로 분리되었습니다. 각자의 엔티티도 따로 존재합니다.</li>
<li>이때 엔티티 간 참조 문제가 발생하여 공통 모듈에 엔티티를 몰아넣는 방안을 고민하게 되었습니다.</li>
</ul>
<h3><strong>방지법</strong></h3>
<ul>
<li>엔티티를 공통 모듈로 몰아넣는 것은 <strong>MSA의 독립성 철학에 어긋납니다</strong>.</li>
<li>서비스 간 데이터 참조는 <strong>ID만 저장</strong>하고 필요 시 <strong>API 호출</strong> 또는 <strong>이벤트/데이터 복제</strong>로 해결해야 합니다.</li>
<li>각 서비스는 <strong>독립적으로 데이터와 DB를 소유</strong>해야 합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">// UserService.java (서비스 A)
public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public UserDTO getUserDetails(Long userId) {
        // 다른 서비스의 엔티티 참조 대신 DTO 사용
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        return new UserDTO(user.getId(), user.getName());
    }
}
</code></pre>
<pre><code class="language-java">// UserDTO.java
public class UserDTO {
    private Long id;
    private String name;

    public UserDTO(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    // Getter, Setter
}
</code></pre>
<pre><code class="language-java">import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class OtherService {

    private final RestTemplate restTemplate;

    public OtherService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    // 서비스 A의 API를 호출하여 사용자 정보를 가져오는 메서드
    public UserDTO getUserFromServiceA(Long userId) {
        String url = "http://service-a/users/" + userId;  // 서비스 A의 API URL
        return restTemplate.getForObject(url, UserDTO.class);
    }
}
</code></pre>
<hr>
<p></p>
<h2>2. 동기 호출로 인한 성능 저하</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>서비스 간 API 호출은 가능한 <strong>비동기화</strong>하거나 <strong>메시지 큐</strong>를 사용하여 성능을 최적화합니다.</li>
<li>자주 호출되는 데이터는 <strong>캐시</strong>를 사용하여 네트워크 지연을 최소화합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>서비스 간 <strong>동기적 API 호출</strong>로 네트워크 지연과 성능 저하가 발생합니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li>가능하면 <strong>비동기화</strong>하고, 중요하지 않은 데이터는 <strong>메시지 큐</strong>(Kafka, RabbitMQ)로 처리합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Async
    public CompletableFuture&#x3C;UserDTO> getUserDetailsAsync(Long userId) {
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        return CompletableFuture.completedFuture(new UserDTO(user.getId(), user.getName()));
    }
}
</code></pre>
<hr>
<p></p>
<h2>3. 모든 데이터를 중복 저장하려는 시도</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>각 서비스는 <strong>자신만의 DB</strong>를 관리하고, 필요한 데이터는 <strong>ID만 저장</strong>합니다.</li>
<li><strong>이벤트 기반 시스템</strong>을 사용하여 데이터 동기화를 처리합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>서비스 간 동일한 데이터를 <strong>중복 저장</strong>하려고 시도하는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li><strong>이벤트 기반</strong> 시스템을 통해 데이터를 동기화하고, 각 서비스는 <strong>ID만 저장</strong>합니다.</li>
<li>중복된 데이터 저장을 피하고, <strong>메시지 큐</strong> 등을 통해 데이터를 동기화합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<p><strong>Producer (데이터 변경 이벤트 발생)</strong></p>
<pre><code class="language-java">import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.beans.factory.annotation.Autowired;

@Service
public class UserService {

    @Autowired
    private KafkaTemplate&#x3C;String, UserDTO> kafkaTemplate;

    public void updateUser(UserDTO userDTO) {
        // 사용자 업데이트 로직
        userRepository.save(userDTO);

        // 업데이트 이벤트 발행
        kafkaTemplate.send("user-updates", userDTO);
    }
}
</code></pre>
<p><strong>Consumer (이벤트 수신 후 데이터 동기화)</strong></p>
<pre><code class="language-java">import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class UserEventListener {

    @KafkaListener(topics = "user-updates", groupId = "user-group")
    public void handleUserUpdate(UserDTO userDTO) {
        // 다른 서비스의 DB에 동기화 로직
        anotherService.syncUserData(userDTO);
    }
}
</code></pre>
<hr>
<p></p>
<h2>4. 불완전한 에러 처리 및 회복 계획</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li><strong>서킷 브레이커</strong> 패턴과 <strong>타임아웃</strong> 및 <strong>재시도</strong> 정책을 사용하여 서비스 간 호출의 안정성을 확보합니다.</li>
<li>서비스는 <strong>자기복구</strong>가 가능하도록 설계합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>에러가 발생한 경우, 제대로 처리하지 않아서 서비스 장애가 확산되는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li><strong>Hystrix</strong>와 같은 <strong>서킷 브레이커</strong> 패턴을 적용하여, 실패한 서비스가 다른 서비스에 영향을 미치지 않도록 합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @HystrixCommand(fallbackMethod = "fallbackMethod")
    public String getUserDetails(Long userId) {
        // 외부 API 호출
        return restTemplate.getForObject("http://other-service/user/" + userId, String.class);
    }

    public String fallbackMethod(Long userId) {
        return "Fallback response: user not available.";
    }
}
</code></pre>
<hr>
<p></p>
<h2>5. 보안 취약점</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li><strong>OAuth 2.0</strong>이나 <strong>JWT</strong>를 사용하여 각 서비스 간 인증 및 권한 관리를 분리합니다.</li>
<li><strong>API Gateway</strong>에서 인증을 처리하고, 서비스 간 통신은 안전하게 관리합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>서비스 간 <strong>인증 및 권한 관리</strong>를 제대로 하지 않아 보안 취약점이 발생하는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li><strong>JWT</strong>를 사용하여 서비스 간 인증을 처리하고, <strong>API Gateway</strong>에서 인증을 관리합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">// JWT 토큰 생성
public String generateToken(String username) {
    return Jwts.builder()
            .setSubject(username)
            .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
            .signWith(SignatureAlgorithm.HS512, "secretKey")
            .compact();
}

// JWT 필터로 인증 체크
public boolean validateToken(String token) {
    try {
        Jwts.parser().setSigningKey("secretKey").parseClaimsJws(token);
        return true;
    } catch (JwtException | IllegalArgumentException e) {
        return false;
    }
}
</code></pre>
<hr>
<p></p>
<h2>6. 불완전한 모니터링 및 로깅</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li><strong>Centralized Logging</strong>과 <strong>Distributed Tracing</strong>을 사용하여 서비스 간 상호작용을 추적합니다.</li>
<li><strong>Prometheus</strong>와 <strong>Grafana</strong>를 사용하여 서비스 상태를 실시간으로 모니터링합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>서비스 간 호출에서 발생한 문제를 <strong>모니터링하지 않아</strong> 빠르게 대응하지 못하는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li><strong>Slf4j</strong>와 같은 로깅 시스템을 사용하여 각 서비스의 <strong>동작</strong>을 추적하고, <strong>문제 발생 시 빠르게 대응</strong>할 수 있도록 합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class UserService {

    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

    public UserDTO getUserDetails(Long userId) {
        logger.info("Fetching user details for userId: {}", userId);
        UserDTO user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        logger.info("User details fetched: {}", user);
        return user;
    }
}
</code></pre>
<hr>
<p></p>
<h2>7. 서비스 간 데이터 중복 검증을 하지 않음</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>각 서비스는 <strong>자체 데이터 검증</strong>을 철저히 하고, 서비스 간에 동일한 데이터가 중복되지 않도록 <strong>데이터 무결성</strong>을 관리합니다.</li>
<li>데이터가 중복되면 <strong>동기화</strong>가 어려워지고, 비즈니스 로직에 오류를 일으킬 수 있습니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>서비스 간 동일한 데이터가 <strong>중복 저장</strong>되거나 <strong>동일한 조건으로 데이터를 처리</strong>하지 않는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li>각 서비스는 데이터 저장 전에 <strong>중복 여부</strong>를 확인합니다.</li>
<li><strong>중복 검증</strong>을 <strong>API 레벨</strong>에서 처리하고, 데이터가 이미 존재하는지 <strong>확인</strong>합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">// UserService.java
@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public UserDTO createUser(UserDTO userDTO) {
        // 중복된 사용자 확인
        if (userRepository.existsByUsername(userDTO.getUsername())) {
            throw new RuntimeException("User already exists with username: " + userDTO.getUsername());
        }
        User user = new User(userDTO.getUsername(), userDTO.getName());
        userRepository.save(user);
        return new UserDTO(user.getId(), user.getName());
    }
}
</code></pre>
<hr>
<p></p>
<h2>8. API 문서화와 명세 부족</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>모든 <strong>서비스 API</strong>는 문서화하고 <strong>명세</strong>를 작성하여 다른 서비스에서 쉽게 이해하고 사용할 수 있도록 합니다.</li>
<li><strong>Swagger</strong>와 같은 도구를 활용하여 <strong>자동화된 API 문서화</strong>를 제공합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>API에 대한 <strong>명세 부족</strong>으로 인해 다른 서비스나 개발자들이 API를 잘못 사용하거나 오해하는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li><strong>Swagger</strong>를 사용하여 API 명세를 <strong>자동으로 문서화</strong>하고, API 사용법에 대해 <strong>명확한 문서</strong>를 제공합니다.</li>
<li><strong>API 버전 관리</strong>를 통해, 서비스가 업데이트될 때 다른 서비스에 미치는 영향을 최소화합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.web.bind.annotation.*;

@Api(tags = "User API")
@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @ApiOperation(value = "Create a new user", notes = "This endpoint allows creating a new user.")
    @PostMapping
    public UserDTO createUser(
        @ApiParam(value = "User details to create a new user", required = true)
        @RequestBody UserDTO userDTO) {
        return userService.createUser(userDTO);
    }
}
</code></pre>
<hr>
<p></p>
<h2>9. 서비스 간 의존성 과도하게 생성</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>서비스 간의 의존성을 <strong>최소화</strong>하고, 하나의 서비스가 다른 서비스에 <strong>과도하게 의존</strong>하지 않도록 설계합니다.</li>
<li><strong>API 호출</strong>이나 <strong>이벤트</strong>를 통해 필요한 데이터만 교환하고, 서로의 <strong>내부 구현</strong>에 의존하지 않습니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>한 서비스가 <strong>다른 서비스에 과도하게 의존</strong>하여 하나의 서비스 장애가 전체 시스템에 영향을 미치는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li><strong>의존성 최소화</strong>: 서비스를 설계할 때 각 서비스가 독립적으로 동작할 수 있도록 합니다.</li>
<li><strong>API 호출</strong>이나 <strong>이벤트 기반 시스템</strong>을 사용하여, 하나의 서비스 장애가 다른 서비스에 영향을 미치지 않도록 합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<p><strong>서비스 A (API 호출 예시)</strong>:</p>
<pre><code class="language-java">// UserService.java (서비스 A)
@Service
public class UserService {

    private final RestTemplate restTemplate;

    public UserService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public String getUserDetails(Long userId) {
        // 다른 서비스의 API를 통해 사용자 정보 호출
        ResponseEntity&#x3C;UserDTO> response = restTemplate.exchange(
                "http://user-service/users/{userId}",
                HttpMethod.GET,
                null,
                UserDTO.class,
                userId);
        return response.getBody().toString();
    }
}
</code></pre>
<hr>
<p></p>
<h2>10. 비즈니스 로직의 복잡도 증가</h2>
<h3><strong>가이드라인</strong></h3>
<ul>
<li>비즈니스 로직은 <strong>단순화</strong>하고, 각 서비스는 <strong>단일 책임 원칙</strong>(SRP)을 따라야 합니다.</li>
<li><strong>복잡한 로직</strong>을 여러 서비스에 분산시키기보다는, 로직을 <strong>단순화</strong>하고 <strong>하나의 서비스</strong>가 처리할 수 있도록 합니다.</li>
</ul>
<h3><strong>실수</strong></h3>
<p>복잡한 비즈니스 로직을 여러 서비스에 나누지 않고, <strong>한 서비스에서 모든 로직</strong>을 처리하려는 경우가 있습니다.</p>
<h3><strong>방지법</strong></h3>
<ul>
<li>각 서비스는 <strong>단일 책임 원칙</strong>을 따르고, 비즈니스 로직을 <strong>작고 독립적인 단위</strong>로 분리하여 관리합니다.</li>
<li>복잡한 로직은 <strong>도메인 서비스</strong>로 나누어 처리하며, 서비스가 확장되었을 때 <strong>유연성</strong>을 유지합니다.</li>
</ul>
<h3><strong>코드 예시</strong></h3>
<pre><code class="language-java">// UserService.java
@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public void updateUserDetails(Long userId, String newName) {
        // 단순한 비즈니스 로직 처리
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new RuntimeException("User not found"));
        user.setName(newName);
        userRepository.save(user);
    }
}
</code></pre>
2:["$","div",null,{"className":"max-w-4xl mx-auto","children":[["$","article",null,{"children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-3xl font-bold mb-2","children":"MSA 구축 시 가이드라인과 실수 및 방지법"}],["$","div",null,{"className":"flex flex-wrap items-center gap-2 mb-4","children":[["$","span",null,{"className":"text-gray-500","children":"2025년 4월 27일"}],["$","span",null,{"className":"text-gray-300 px-2","children":"•"}],["$","span",null,{"className":"text-gray-500","children":"서원우"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-4","children":[["$","$L6","MSA",{"href":"/tag/MSA","children":["$","div",null,{"className":"bg-gray-100 px-3 py-1 rounded-2xl text-blue-600 hover:bg-blue-50 text-sm font-medium transition-colors ","children":"MSA"}]}],["$","$L6","Backend",{"href":"/tag/Backend","children":["$","div",null,{"className":"bg-gray-100 px-3 py-1 rounded-2xl text-blue-600 hover:bg-blue-50 text-sm font-medium transition-colors ","children":"Backend"}]}],["$","$L6","JAVA Spring",{"href":"/tag/JAVA Spring","children":["$","div",null,{"className":"bg-gray-100 px-3 py-1 rounded-2xl text-blue-600 hover:bg-blue-50 text-sm font-medium transition-colors ","children":"JAVA Spring"}]}]]}],"$undefined"]}],["$","div",null,{"className":"markdown-body prose prose-blue max-w-none","dangerouslySetInnerHTML":{"__html":"$8"}}]]}],["$","div",null,{"className":"mt-8 pt-8 border-t","children":["$","div",null,{"className":"flex justify-between items-center","children":[["$","$L6",null,{"href":"/blog","className":"text-blue-600 hover:underline","children":"← 블로그 목록으로 돌아가기"}],["$","$L6",null,{"href":"/tag","className":"text-blue-600 hover:underline","children":"태그 목록 보기 →"}]]}]}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"MSA 구축 시 가이드라인과 실수 및 방지법 - My Blog"}],["$","meta","3",{"property":"og:title","content":"MSA 구축 시 가이드라인과 실수 및 방지법"}],["$","meta","4",{"property":"og:type","content":"article"}],["$","meta","5",{"name":"twitter:card","content":"summary"}],["$","meta","6",{"name":"twitter:title","content":"MSA 구축 시 가이드라인과 실수 및 방지법"}]]
1:null
