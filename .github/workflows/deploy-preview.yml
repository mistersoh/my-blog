name: PR 미리보기 배포

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

# GitHub API에 접근하기 위한 권한 설정
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  deploy-preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 의존성 설치
        run: npm ci
        
      - name: 정적 사이트 빌드
        run: npm run build
        
      - name: AWS 인증 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: PR 번호 추출
        id: pr_number
        run: echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        
      - name: S3 미리보기 버킷 설정
        id: preview_bucket
        run: |
          PREVIEW_BUCKET="${{ secrets.AWS_PREVIEW_BUCKET_PREFIX }}-pr-${{ steps.pr_number.outputs.pr_number }}"
          echo "preview_bucket=$PREVIEW_BUCKET" >> $GITHUB_OUTPUT
          echo "preview_url=http://$PREVIEW_BUCKET.s3-website.ap-northeast-2.amazonaws.com" >> $GITHUB_OUTPUT
      
      # 1. 버킷 생성 단계
      - name: S3 버킷 생성 (없는 경우)
        run: |
          if ! aws s3api head-bucket --bucket ${{ steps.preview_bucket.outputs.preview_bucket }} 2>/dev/null; then
            echo "새 버킷 생성: ${{ steps.preview_bucket.outputs.preview_bucket }}"
            aws s3 mb s3://${{ steps.preview_bucket.outputs.preview_bucket }}
          else
            echo "기존 버킷 사용: ${{ steps.preview_bucket.outputs.preview_bucket }}"
          fi
          
      # 2. 버킷 공개 설정
      - name: 버킷 공개 액세스 설정
        run: |
          # Block Public Access 설정 비활성화 (버킷 레벨)
          aws s3api put-public-access-block --bucket ${{ steps.preview_bucket.outputs.preview_bucket }} --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
          
          echo "버킷 공개 액세스 설정 완료"
          
      # 3. 버킷 정책 설정
      - name: 버킷 정책 설정
        run: |
          # 정확한 버킷 정책 설정
          echo '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'${{ steps.preview_bucket.outputs.preview_bucket }}'/*"
              }
            ]
          }' > bucket-policy.json
          
          # 정책 파일 내용 확인
          echo "정책 파일 내용:"
          cat bucket-policy.json
          
          # 버킷 정책 적용
          aws s3api put-bucket-policy --bucket ${{ steps.preview_bucket.outputs.preview_bucket }} --policy file://bucket-policy.json
          
          # 정책 적용 확인
          echo "적용된 버킷 정책:"
          aws s3api get-bucket-policy --bucket ${{ steps.preview_bucket.outputs.preview_bucket }} --output json
          
      # 4. S3 웹사이트 설정 업데이트
      - name: S3 웹사이트 설정
        run: |
          aws s3 website s3://${{ steps.preview_bucket.outputs.preview_bucket }} --index-document index.html --error-document 404.html
          
          echo "웹사이트 설정 완료"
          
      # 5. 정적 파일 배포
      - name: S3에 파일 배포
        run: |
          # ACL 없이 파일 업로드 (버킷 정책으로 공개 접근 허용)
          aws s3 sync ./out/ s3://${{ steps.preview_bucket.outputs.preview_bucket }} --delete
          
          echo "배포 완료 - 미리보기 URL: ${{ steps.preview_bucket.outputs.preview_url }}"
          
      - name: PR에 미리보기 URL 댓글 달기
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            const preview_url = "${{ steps.preview_bucket.outputs.preview_url }}";
            
            const timestamp = new Date().toISOString();
            const body = `### 🚀 미리보기 환경이 배포되었습니다 (${timestamp})\n\n미리보기 URL: ${preview_url}\n\n현재 PR의 최신 변경사항이 위 URL에 반영되었습니다.`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: AWS 인증 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: PR 번호 추출
        id: pr_number
        run: echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        
      - name: S3 미리보기 버킷 설정
        id: preview_bucket
        run: |
          PREVIEW_BUCKET="${{ secrets.AWS_PREVIEW_BUCKET_PREFIX }}-pr-${{ steps.pr_number.outputs.pr_number }}"
          echo "preview_bucket=$PREVIEW_BUCKET" >> $GITHUB_OUTPUT
          
      - name: S3 버킷 비우기 및 삭제
        run: |
          # 버킷이 존재하는지 확인
          if aws s3api head-bucket --bucket ${{ steps.preview_bucket.outputs.preview_bucket }} 2>/dev/null; then
            # 버킷 비우기
            aws s3 rm s3://${{ steps.preview_bucket.outputs.preview_bucket }} --recursive
            # 버킷 삭제
            aws s3 rb s3://${{ steps.preview_bucket.outputs.preview_bucket }} --force
          else
            echo "미리보기 버킷이 존재하지 않습니다."
          fi 